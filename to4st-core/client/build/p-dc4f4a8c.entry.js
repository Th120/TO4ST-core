import{r as e,h as t,g as a,a as n,c as r,H as s}from"./p-d36259ec.js";import{A as o}from"./p-de009b4e.js";import"./p-70b7bd16.js";import{a as i}from"./p-51ed6d90.js";import{d as p}from"./p-1d19becb.js";import{h as l,e as y}from"./p-fde7e420.js";import"./p-c93254e9.js";const d=new RegExp(["(\\\\.)","(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?"].join("|"),"g"),c=e=>e.replace(/([.+*?=^!:${}()[\]|/\\])/g,"\\$1"),g=e=>e.replace(/([=!:$/()])/g,"\\$1"),u=e=>e&&e.sensitive?"":"i",m=(e,t,a)=>{for(var n=(a=a||{}).strict,r=!1!==a.end,s=c(a.delimiter||"/"),o=a.delimiters||"./",i=[].concat(a.endsWith||[]).map(c).concat("$").join("|"),p="",l=!1,y=0;y<e.length;y++){var d=e[y];if("string"==typeof d)p+=c(d),l=y===e.length-1&&o.indexOf(d[d.length-1])>-1;else{var g=c(d.prefix||""),m=d.repeat?"(?:"+d.pattern+")(?:"+g+"(?:"+d.pattern+"))*":d.pattern;t&&t.push(d),p+=d.optional?d.partial?g+"("+m+")?":"(?:"+g+"("+m+"))?":g+"("+m+")"}}return r?(n||(p+="(?:"+s+")?"),p+="$"===i?"$":"(?="+i+")"):(n||(p+="(?:"+s+"(?="+i+"))?"),l||(p+="(?="+s+"|"+i+")")),new RegExp("^"+p,u(a))},h=(e,t,a)=>e instanceof RegExp?((e,t)=>{if(!t)return e;var a=e.source.match(/\((?!\?)/g);if(a)for(var n=0;n<a.length;n++)t.push({name:n,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,pattern:null});return e})(e,t):Array.isArray(e)?((e,t,a)=>{for(var n=[],r=0;r<e.length;r++)n.push(h(e[r],t,a).source);return new RegExp("(?:"+n.join("|")+")",u(a))})(e,t,a):((e,t,a)=>m(((e,t)=>{for(var a,n=[],r=0,s=0,o="",i=t&&t.delimiter||"/",p=t&&t.delimiters||"./",l=!1;null!==(a=d.exec(e));){var y=a[0],u=a[1],m=a.index;if(o+=e.slice(s,m),s=m+y.length,u)o+=u[1],l=!0;else{var h="",S=e[s],f=a[2],I=a[3],v=a[4],C=a[5];if(!l&&o.length){var B=o.length-1;p.indexOf(o[B])>-1&&(h=o[B],o=o.slice(0,B))}o&&(n.push(o),o="",l=!1);var P=h||i,b=I||v;n.push({name:f||r++,prefix:h,delimiter:P,optional:"?"===C||"*"===C,repeat:"+"===C||"*"===C,partial:""!==h&&void 0!==S&&S!==h,pattern:b?g(b):"[^"+c(P)+"]+?"})}}return(o||s<e.length)&&n.push(o+e.substr(s)),n})(e,a),t,a))(e,t,a),S=(e,t)=>new RegExp("^"+t+"(\\/|\\?|#|$)","i").test(e),f=(e,t)=>S(e,t)?e.substr(t.length):e,I=e=>"/"===e.charAt(e.length-1)?e.slice(0,-1):e,v=e=>"/"===e.charAt(0)?e:"/"+e,C=e=>"/"===e.charAt(0)?e.substr(1):e,B=e=>{const{pathname:t,search:a,hash:n}=e;let r=t||"/";return a&&"?"!==a&&(r+="?"===a.charAt(0)?a:"?"+a),n&&"#"!==n&&(r+="#"===n.charAt(0)?n:"#"+n),r},P=e=>"/"===e.charAt(0),b=e=>Math.random().toString(36).substr(2,e),R=(e,t)=>{for(let a=t,n=a+1,r=e.length;n<r;a+=1,n+=1)e[a]=e[n];e.pop()},_=(e,t)=>{if(e===t)return!0;if(null==e||null==t)return!1;if(Array.isArray(e))return Array.isArray(t)&&e.length===t.length&&e.every(((e,a)=>_(e,t[a])));const a=typeof e;if(a!==typeof t)return!1;if("object"===a){const a=e.valueOf(),n=t.valueOf();if(a!==e||n!==t)return _(a,n);const r=Object.keys(e),s=Object.keys(t);return r.length===s.length&&r.every((a=>_(e[a],t[a])))}return!1},w=(e,t,a,n)=>{let r;"string"==typeof e?(r=(e=>{let t=e||"/",a="",n="";const r=t.indexOf("#");-1!==r&&(n=t.substr(r),t=t.substr(0,r));const s=t.indexOf("?");return-1!==s&&(a=t.substr(s),t=t.substr(0,s)),{pathname:t,search:"?"===a?"":a,hash:"#"===n?"":n,query:{},key:""}})(e),void 0!==t&&(r.state=t)):(r=Object.assign({pathname:""},e),r.search&&"?"!==r.search.charAt(0)&&(r.search="?"+r.search),r.hash&&"#"!==r.hash.charAt(0)&&(r.hash="#"+r.hash),void 0!==t&&void 0===r.state&&(r.state=t));try{r.pathname=decodeURI(r.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+r.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}var s;return r.key=a,n?r.pathname?"/"!==r.pathname.charAt(0)&&(r.pathname=((e,t="")=>{let a,n=t&&t.split("/")||[],r=0;const s=e&&e.split("/")||[],o=e&&P(e),i=t&&P(t),p=o||i;if(e&&P(e)?n=s:s.length&&(n.pop(),n=n.concat(s)),!n.length)return"/";if(n.length){const e=n[n.length-1];a="."===e||".."===e||""===e}else a=!1;for(let e=n.length;e>=0;e--){const t=n[e];"."===t?R(n,e):".."===t?(R(n,e),r++):r&&(R(n,e),r--)}if(!p)for(;r--;r)n.unshift("..");!p||""===n[0]||n[0]&&P(n[0])||n.unshift("");let l=n.join("/");return a&&"/"!==l.substr(-1)&&(l+="/"),l})(r.pathname,n.pathname)):r.pathname=n.pathname:r.pathname||(r.pathname="/"),r.query=(s=r.search||"")?(/^[?#]/.test(s)?s.slice(1):s).split("&").reduce(((e,t)=>{let[a,n]=t.split("=");return e[a]=n?decodeURIComponent(n.replace(/\+/g," ")):"",e}),{}):{},r};let A=0;const G={},T=(e,t={})=>{"string"==typeof t&&(t={path:t});const{path:a="/",exact:n=!1,strict:r=!1}=t,{re:s,keys:o}=((e,t)=>{const a=`${t.end}${t.strict}`,n=G[a]||(G[a]={}),r=JSON.stringify(e);if(n[r])return n[r];const s=[],o={re:h(e,s,t),keys:s};return A<1e4&&(n[r]=o,A+=1),o})(a,{end:n,strict:r}),i=s.exec(e);if(!i)return null;const[p,...l]=i,y=e===p;return n&&!y?null:{path:a,url:"/"===a&&""===p?"/":p,isExact:y,params:o.reduce(((e,t,a)=>(e[t.name]=l[a],e)),{})}},k=class{constructor(t){e(this,t),this.group=null,this.match=null,this.componentProps={},this.exact=!1,this.scrollOnNextRender=!1,this.previousMatch=null}computeMatch(e){const t=null!=this.group||null!=this.el.parentElement&&"stencil-route-switch"===this.el.parentElement.tagName.toLowerCase();if(e&&!t)return this.previousMatch=this.match,this.match=T(e.pathname,{path:this.url,exact:this.exact,strict:!0})}async loadCompleted(){let e={};var t,a;this.history&&this.history.location.hash?e={scrollToId:this.history.location.hash.substr(1)}:this.scrollTopOffset&&(e={scrollTopOffset:this.scrollTopOffset}),"function"==typeof this.componentUpdated?this.componentUpdated(e):!this.match||(a=this.previousMatch,null==(t=this.match)&&null==a||null!=a&&t&&a&&t.path===a.path&&t.url===a.url&&_(t.params,a.params))||!this.routeViewsUpdated||this.routeViewsUpdated(e)}async componentDidUpdate(){await this.loadCompleted()}async componentDidLoad(){await this.loadCompleted()}render(){if(!this.match||!this.history)return null;const e=Object.assign({},this.componentProps,{history:this.history,match:this.match});return this.routeRender?this.routeRender(Object.assign({},e,{component:this.component})):this.component?t(this.component,Object.assign({},e)):void 0}get el(){return a(this)}static get watchers(){return{location:["computeMatch"]}}};o.injectProps(k,["location","history","historyType","routeViewsUpdated"]),k.style="stencil-route.inactive{display:none}";const M=(e,t,a)=>a(e.confirm(t)),D=(e,t)=>{const a=e[t],n="__storage_test__";try{return a.setItem(n,n),a.removeItem(n),!0}catch(e){return e instanceof DOMException&&(22===e.code||1014===e.code||"QuotaExceededError"===e.name||"NS_ERROR_DOM_QUOTA_REACHED"===e.name)&&0!==a.length}},Q=class{constructor(t){e(this,t),this.unsubscribe=()=>{},this.activeClass="link-active",this.exact=!1,this.strict=!0,this.custom="a",this.match=null}componentWillLoad(){this.computeMatch()}computeMatch(){this.location&&(this.match=T(this.location.pathname,{path:this.urlMatch||this.url,exact:this.exact,strict:this.strict}))}handleClick(e){var t,a,n;if(!((t=e).metaKey||t.altKey||t.ctrlKey||t.shiftKey)&&this.history&&this.url&&this.root)return e.preventDefault(),this.history.push((n=this.root,"/"==(a=this.url).charAt(0)&&"/"==n.charAt(n.length-1)?n.slice(0,n.length-1)+a:n+a))}render(){let e={class:{[this.activeClass]:null!==this.match},onClick:this.handleClick.bind(this)};return this.anchorClass&&(e.class[this.anchorClass]=!0),"a"===this.custom&&(e=Object.assign({},e,{href:this.url,title:this.anchorTitle,role:this.anchorRole,tabindex:this.anchorTabIndex,"aria-haspopup":this.ariaHaspopup,id:this.anchorId,"aria-posinset":this.ariaPosinset,"aria-setsize":this.ariaSetsize,"aria-label":this.ariaLabel})),t(this.custom,Object.assign({},e),t("slot",null))}get el(){return a(this)}static get watchers(){return{location:["computeMatch"]}}};o.injectProps(Q,["history","location","root"]);const L=e=>"STENCIL-ROUTE"===e.tagName,U=class{constructor(t){e(this,t),this.group=((1e17*Math.random()).toString().match(/.{4}/g)||[]).join("-"),this.subscribers=[],this.queue=n(this,"queue")}componentWillLoad(){null!=this.location&&this.regenerateSubscribers(this.location)}async regenerateSubscribers(e){if(null==e)return;let t=-1;if(this.subscribers=Array.prototype.slice.call(this.el.children).filter(L).map(((a,n)=>{const r=T(e.pathname,{path:a.url,exact:a.exact,strict:!0});return r&&-1===t&&(t=n),{el:a,match:r}})),-1===t)return;if(this.activeIndex===t)return void(this.subscribers[t].el.match=this.subscribers[t].match);this.activeIndex=t;const a=this.subscribers[this.activeIndex];this.scrollTopOffset&&(a.el.scrollTopOffset=this.scrollTopOffset),a.el.group=this.group,a.el.match=a.match,a.el.componentUpdated=e=>{this.queue.write((()=>{this.subscribers.forEach(((e,t)=>{if(e.el.componentUpdated=void 0,t===this.activeIndex)return e.el.style.display="";this.scrollTopOffset&&(e.el.scrollTopOffset=this.scrollTopOffset),e.el.group=this.group,e.el.match=null,e.el.style.display="none"}))})),this.routeViewsUpdated&&this.routeViewsUpdated(Object.assign({scrollTopOffset:this.scrollTopOffset},e))}}render(){return t("slot",null)}get el(){return a(this)}static get watchers(){return{location:["regenerateSubscribers"]}}};o.injectProps(U,["location","routeViewsUpdated"]);const K=(e,...t)=>{e||console.warn(...t)},O=()=>{let e,t=[];return{setPrompt:t=>(K(null==e,"A history supports only one prompt at a time"),e=t,()=>{e===t&&(e=null)}),confirmTransitionTo:(t,a,n,r)=>{if(null!=e){const s="function"==typeof e?e(t,a):e;"string"==typeof s?"function"==typeof n?n(s,r):(K(!1,"A history needs a getUserConfirmation function in order to use a prompt message"),r(!0)):r(!1!==s)}else r(!0)},appendListener:e=>{let a=!0;const n=(...t)=>{a&&e(...t)};return t.push(n),()=>{a=!1,t=t.filter((e=>e!==n))}},notifyListeners:(...e)=>{t.forEach((t=>t(...e)))}}},W=(e,t="scrollPositions")=>{let a=new Map;const n=(t,n)=>{if(a.set(t,n),D(e,"sessionStorage")){const t=[];a.forEach(((e,a)=>{t.push([a,e])})),e.sessionStorage.setItem("scrollPositions",JSON.stringify(t))}};if(D(e,"sessionStorage")){const n=e.sessionStorage.getItem(t);a=n?new Map(JSON.parse(n)):a}return"scrollRestoration"in e.history&&(history.scrollRestoration="manual"),{set:n,get:e=>a.get(e),has:e=>a.has(e),capture:t=>{n(t,[e.scrollX,e.scrollY])}}},F={hashbang:{encodePath:e=>"!"===e.charAt(0)?e:"!/"+C(e),decodePath:e=>"!"===e.charAt(0)?e.substr(1):e},noslash:{encodePath:C,decodePath:v},slash:{encodePath:v,decodePath:v}},j=(e,t)=>{const a=0==e.pathname.indexOf(t)?"/"+e.pathname.slice(t.length):e.pathname;return Object.assign({},e,{pathname:a})},E={browser:(e,t={})=>{let a=!1;const n=e.history,r=e.location,s=e.navigator,o=(e=>{const t=e.navigator.userAgent;return(-1===t.indexOf("Android 2.")&&-1===t.indexOf("Android 4.0")||-1===t.indexOf("Mobile Safari")||-1!==t.indexOf("Chrome")||-1!==t.indexOf("Windows Phone"))&&e.history&&"pushState"in e.history})(e),i=!(-1===s.userAgent.indexOf("Trident")),p=W(e),l=null!=t.forceRefresh&&t.forceRefresh,y=null!=t.getUserConfirmation?t.getUserConfirmation:M,d=null!=t.keyLength?t.keyLength:6,c=t.basename?I(v(t.basename)):"",g=()=>{try{return e.history.state||{}}catch(e){return{}}},u=e=>{e=e||{};const{key:t,state:a}=e,{pathname:n,search:s,hash:o}=r;let i=n+s+o;return K(!c||S(i,c),'You are attempting to use a basename on a page whose URL path does not begin with the basename. Expected path "'+i+'" to begin with "'+c+'".'),c&&(i=f(i,c)),w(i,a,t||b(d))},m=O(),h=e=>{p.capture(U.location.key),Object.assign(U,e),U.location.scrollPosition=p.get(U.location.key),U.length=n.length,m.notifyListeners(U.location,U.action)},C=e=>{((e,t)=>void 0===t.state&&-1===e.userAgent.indexOf("CriOS"))(s,e)||R(u(e.state))},P=()=>{R(u(g()))},R=e=>{if(a)a=!1,h();else{const t="POP";m.confirmTransitionTo(e,t,y,(a=>{a?h({action:t,location:e}):_(e)}))}},_=e=>{let t=G.indexOf(U.location.key),n=G.indexOf(e.key);-1===t&&(t=0),-1===n&&(n=0);const r=t-n;r&&(a=!0,Q(r))},A=u(g());let G=[A.key],T=0,k=!1;const D=e=>c+B(e),Q=e=>{n.go(e)},L=t=>{T+=t,1===T?(e.addEventListener("popstate",C),i&&e.addEventListener("hashchange",P)):0===T&&(e.removeEventListener("popstate",C),i&&e.removeEventListener("hashchange",P))},U={length:n.length,action:"POP",location:A,createHref:D,push:(e,t)=>{K(!("object"==typeof e&&void 0!==e.state&&void 0!==t),"You should avoid providing a 2nd state argument to push when the 1st argument is a location-like object that already has state; it is ignored");const a="PUSH",s=w(e,t,b(d),U.location);m.confirmTransitionTo(s,a,y,(e=>{if(!e)return;const t=D(s),{key:i,state:p}=s;if(o)if(n.pushState({key:i,state:p},"",t),l)r.href=t;else{const e=G.indexOf(U.location.key),t=G.slice(0,-1===e?0:e+1);t.push(s.key),G=t,h({action:a,location:s})}else K(void 0===p,"Browser history cannot push state in browsers that do not support HTML5 history"),r.href=t}))},replace:(e,t)=>{K(!("object"==typeof e&&void 0!==e.state&&void 0!==t),"You should avoid providing a 2nd state argument to replace when the 1st argument is a location-like object that already has state; it is ignored");const a="REPLACE",s=w(e,t,b(d),U.location);m.confirmTransitionTo(s,a,y,(e=>{if(!e)return;const t=D(s),{key:i,state:p}=s;if(o)if(n.replaceState({key:i,state:p},"",t),l)r.replace(t);else{const e=G.indexOf(U.location.key);-1!==e&&(G[e]=s.key),h({action:a,location:s})}else K(void 0===p,"Browser history cannot replace state in browsers that do not support HTML5 history"),r.replace(t)}))},go:Q,goBack:()=>Q(-1),goForward:()=>Q(1),block:(e="")=>{const t=m.setPrompt(e);return k||(L(1),k=!0),()=>(k&&(k=!1,L(-1)),t())},listen:e=>{const t=m.appendListener(e);return L(1),()=>{L(-1),t()}},win:e};return U},hash:(e,t={})=>{let a=!1,n=null,r=0,s=!1;const o=e.location,i=e.history,p=-1===e.navigator.userAgent.indexOf("Firefox"),l=null!=t.keyLength?t.keyLength:6,{getUserConfirmation:y=M,hashType:d="slash"}=t,c=t.basename?I(v(t.basename)):"",{encodePath:g,decodePath:u}=F[d],m=()=>{const e=o.href,t=e.indexOf("#");return-1===t?"":e.substring(t+1)},h=e=>{const t=o.href.indexOf("#");o.replace(o.href.slice(0,t>=0?t:0)+"#"+e)},C=()=>{let e=u(m());return K(!c||S(e,c),'You are attempting to use a basename on a page whose URL path does not begin with the basename. Expected path "'+e+'" to begin with "'+c+'".'),c&&(e=f(e,c)),w(e,void 0,b(l))},P=O(),R=e=>{Object.assign(j,e),j.length=i.length,P.notifyListeners(j.location,j.action)},A=()=>{const e=m(),t=g(e);if(e!==t)h(t);else{const e=C(),t=j.location;if(!a&&(r=t).pathname===(s=e).pathname&&r.search===s.search&&r.hash===s.hash&&r.key===s.key&&_(r.state,s.state))return;if(n===B(e))return;n=null,G(e)}var r,s},G=e=>{if(a)a=!1,R();else{const t="POP";P.confirmTransitionTo(e,t,y,(a=>{a?R({action:t,location:e}):T(e)}))}},T=e=>{let t=L.lastIndexOf(B(j.location)),n=L.lastIndexOf(B(e));-1===t&&(t=0),-1===n&&(n=0);const r=t-n;r&&(a=!0,U(r))},k=m(),D=g(k);k!==D&&h(D);const Q=C();let L=[B(Q)];const U=e=>{K(p,"Hash history go(n) causes a full page reload in this browser"),i.go(e)},W=(e,t)=>{r+=t,1===r?e.addEventListener("hashchange",A):0===r&&e.removeEventListener("hashchange",A)},j={length:i.length,action:"POP",location:Q,createHref:e=>"#"+g(c+B(e)),push:(e,t)=>{K(void 0===t,"Hash history cannot push state; it is ignored");const a="PUSH",r=w(e,void 0,b(l),j.location);P.confirmTransitionTo(r,a,y,(e=>{if(!e)return;const t=B(r),s=g(c+t);if(m()!==s){n=t,(e=>{o.hash=e})(s);const e=L.lastIndexOf(B(j.location)),i=L.slice(0,-1===e?0:e+1);i.push(t),L=i,R({action:a,location:r})}else K(!1,"Hash history cannot PUSH the same path; a new entry will not be added to the history stack"),R()}))},replace:(e,t)=>{K(void 0===t,"Hash history cannot replace state; it is ignored");const a="REPLACE",r=w(e,void 0,b(l),j.location);P.confirmTransitionTo(r,a,y,(e=>{if(!e)return;const t=B(r),s=g(c+t);m()!==s&&(n=t,h(s));const o=L.indexOf(B(j.location));-1!==o&&(L[o]=t),R({action:a,location:r})}))},go:U,goBack:()=>U(-1),goForward:()=>U(1),block:(t="")=>{const a=P.setPrompt(t);return s||(W(e,1),s=!0),()=>(s&&(s=!1,W(e,-1)),a())},listen:t=>{const a=P.appendListener(t);return W(e,1),()=>{W(e,-1),a()}},win:e};return j}},x=class{constructor(t){e(this,t),this.root="/",this.historyType="browser",this.titleSuffix="",this.routeViewsUpdated=(e={})=>{if(this.history&&e.scrollToId&&"browser"===this.historyType){const t=this.history.win.document.getElementById(e.scrollToId);if(t)return t.scrollIntoView()}this.scrollTo(e.scrollTopOffset||this.scrollTopOffset)},this.isServer=n(this,"isServer"),this.queue=n(this,"queue")}componentWillLoad(){this.history=E[this.historyType](this.el.ownerDocument.defaultView),this.history.listen((e=>{e=j(e,this.root),this.location=e})),this.location=j(this.history.location,this.root)}scrollTo(e){const t=this.history;if(null!=e&&!this.isServer&&t)return"POP"===t.action&&Array.isArray(t.location.scrollPosition)?this.queue.write((()=>{t&&t.location&&Array.isArray(t.location.scrollPosition)&&t.win.scrollTo(t.location.scrollPosition[0],t.location.scrollPosition[1])})):this.queue.write((()=>{t.win.scrollTo(0,e)}))}render(){if(this.location&&this.history)return t(o.Provider,{state:{historyType:this.historyType,location:this.location,titleSuffix:this.titleSuffix,root:this.root,history:this.history,routeViewsUpdated:this.routeViewsUpdated}},t("slot",null))}get el(){return a(this)}},N={Query:{name:"Query",fields:{games:{type:"PaginatedGame",args:{options:["GameQuery!","GameQuery"]}},game:{type:"Game",args:{gameId:["String!","String"]}},rounds:{type:"PaginatedRound",args:{options:["RoundQuery!","RoundQuery"]}},round:{type:"Round",args:{roundId:["Float!","Float"]}},gameModes:{type:"PaginatedGameMode"},playerRoundStats:{type:"PaginatedPlayerRoundStats",args:{options:["PlayerRoundStatsQuery!","PlayerRoundStatsQuery"]}},playerRoundWeaponStats:{type:"PaginatedPlayerRoundWeaponStats",args:{options:["PlayerRoundWeaponStatsQuery!","PlayerRoundWeaponStatsQuery"]}},playerStatistics:{type:"PaginatedPlayerStatistics",args:{options:["PlayerStatisticsQuery!","PlayerStatisticsQuery"]}},playerWeaponStatistics:{type:"PlayerWeaponStatistics",args:{options:["PlayerWeaponStatisticsQuery!","PlayerWeaponStatisticsQuery"]}},gameservers:{type:"PaginatedGameserver",args:{options:["GameserversQuery!","GameserversQuery"]}},gameserver:{type:"Gameserver",args:{options:["GameserverQuery!","GameserverQuery"]}},registeredPlayers:{type:"PaginatedRegisteredPlayers",args:{options:["RegisteredPlayersQuery!","RegisteredPlayersQuery"]}},registeredPlayer:{type:"RegisteredPlayer",args:{options:["RegisteredPlayerQuery!","RegisteredPlayerQuery"]}},bans:{type:"PaginatedBan",args:{options:["BanQuery!","BanQuery"]}},banCheck:{type:"Ban",args:{banCheck:["BanCheck!","BanCheck"]}},gameserverConfigs:{type:"PaginatedGameserverConfig",args:{options:["GameserverConfigsQuery!","GameserverConfigsQuery"]}},gameserverConfig:{type:"GameserverConfig",args:{options:["GameserverConfigQuery!","GameserverConfigQuery"]}},matchConfigs:{type:"PaginatedMatchConfig",args:{options:["MatchConfigsQuery!","MatchConfigsQuery"]}},matchConfig:{type:"MatchConfig",args:{options:["MatchConfigQuery!","MatchConfigQuery"]}},authKeys:{type:"PaginatedAuthKey",args:{options:["AuthKeyQuery!","AuthKeyQuery"]}},authKey:{type:"AuthKey",args:{authKey:["String!","String"]}},authValid:{type:"Boolean"},appConfig:{type:"AppConfig",args:{cached:["Boolean","Boolean"]}},__typename:{type:"String"}},scalar:["authValid"]},GameQuery:{name:"GameQuery",fields:{page:{type:"Int"},pageSize:{type:"Int"},orderDesc:{type:"Boolean"},orderByEndedAt:{type:"Boolean"},gameserverId:{type:"String"},startedAfter:{type:"DateTime"},startedBefore:{type:"DateTime"},endedAfter:{type:"DateTime"},endedBefore:{type:"DateTime"},map:{type:"ServerMapInput"},gameMode:{type:"GameModeInput"},onlyFinishedGames:{type:"Boolean"},rankedOnly:{type:"Boolean"},__typename:{type:"String"}},scalar:["page","pageSize","orderDesc","orderByEndedAt","gameserverId","startedAfter","startedBefore","endedAfter","endedBefore","onlyFinishedGames","rankedOnly"]},Int:{name:"Int"},Boolean:{name:"Boolean"},String:{name:"String"},DateTime:{name:"DateTime"},ServerMapInput:{name:"ServerMapInput",fields:{name:{type:"String"},__typename:{type:"String"}},scalar:["name"]},GameModeInput:{name:"GameModeInput",fields:{name:{type:"String"},isTeamBased:{type:"Boolean"},__typename:{type:"String"}},scalar:["name","isTeamBased"]},PaginatedGame:{name:"PaginatedGame",fields:{content:{type:"Game"},totalCount:{type:"Int"},pageCount:{type:"Int"},__typename:{type:"String"}},scalar:["totalCount","pageCount"]},Game:{name:"Game",fields:{id:{type:"String"},gameserver:{type:"Gameserver"},matchConfig:{type:"MatchConfig"},startedAt:{type:"DateTime"},endedAt:{type:"DateTime"},map:{type:"ServerMap"},gameMode:{type:"GameMode"},rounds:{type:"Round"},__typename:{type:"String"}},scalar:["id","startedAt","endedAt"]},Gameserver:{name:"Gameserver",fields:{id:{type:"String"},authKey:{type:"String"},currentName:{type:"String"},description:{type:"String"},lastContact:{type:"DateTime"},gameserverConfig:{type:"GameserverConfig"},__typename:{type:"String"}},scalar:["id","authKey","currentName","description","lastContact"]},GameserverConfig:{name:"GameserverConfig",fields:{gameserver:{type:"Gameserver"},currentMatchConfig:{type:"MatchConfig"},currentName:{type:"String"},voteLength:{type:"Int"},gamePassword:{type:"String"},reservedSlots:{type:"Int"},balanceClans:{type:"Boolean"},allowSkipMapVote:{type:"Boolean"},tempKickBanTime:{type:"Int"},autoRecordReplay:{type:"Boolean"},playerGameControl:{type:"Boolean"},enableMapVote:{type:"Boolean"},serverAdmins:{type:"String"},serverDescription:{type:"String"},website:{type:"String"},contact:{type:"String"},mapNoReplay:{type:"Int"},enableVoicechat:{type:"Boolean"},__typename:{type:"String"}},scalar:["currentName","voteLength","gamePassword","reservedSlots","balanceClans","allowSkipMapVote","tempKickBanTime","autoRecordReplay","playerGameControl","enableMapVote","serverAdmins","serverDescription","website","contact","mapNoReplay","enableVoicechat"]},MatchConfig:{name:"MatchConfig",fields:{id:{type:"Int"},configName:{type:"String"},gameMode:{type:"GameMode"},configHash:{type:"String"},matchEndLength:{type:"Int"},warmUpLength:{type:"Int"},friendlyFireScale:{type:"Float"},mapLength:{type:"Int"},roundLength:{type:"Int"},preRoundLength:{type:"Int"},roundEndLength:{type:"Int"},roundLimit:{type:"Int"},allowGhostcam:{type:"Boolean"},playerVoteThreshold:{type:"Float"},autoBalanceTeams:{type:"Boolean"},playerVoteTeamOnly:{type:"Boolean"},maxTeamDamage:{type:"Float"},enablePlayerVote:{type:"Boolean"},autoSwapTeams:{type:"Boolean"},midGameBreakLength:{type:"Int"},nadeRestriction:{type:"Boolean"},globalVoicechat:{type:"Boolean"},muteDeadToTeam:{type:"Boolean"},ranked:{type:"Boolean"},private:{type:"Boolean"},__typename:{type:"String"}},scalar:["id","configName","configHash","matchEndLength","warmUpLength","friendlyFireScale","mapLength","roundLength","preRoundLength","roundEndLength","roundLimit","allowGhostcam","playerVoteThreshold","autoBalanceTeams","playerVoteTeamOnly","maxTeamDamage","enablePlayerVote","autoSwapTeams","midGameBreakLength","nadeRestriction","globalVoicechat","muteDeadToTeam","ranked","private"]},GameMode:{name:"GameMode",fields:{name:{type:"String"},isTeamBased:{type:"Boolean"},__typename:{type:"String"}},scalar:["name","isTeamBased"]},Float:{name:"Float"},ServerMap:{name:"ServerMap",fields:{name:{type:"String"},__typename:{type:"String"}},scalar:["name"]},Round:{name:"Round",fields:{id:{type:"Int"},game:{type:"Game"},startedAt:{type:"DateTime"},endedAt:{type:"DateTime"},scoreSpecialForces:{type:"Int"},scoreTerrorists:{type:"Int"},playerRoundStats:{type:"PlayerRoundStats"},playerRoundWeaponStats:{type:"PlayerRoundWeaponStats"},__typename:{type:"String"}},scalar:["id","startedAt","endedAt","scoreSpecialForces","scoreTerrorists"]},PlayerRoundStats:{name:"PlayerRoundStats",fields:{round:{type:"Round"},steamId64:{type:"String"},kills:{type:"Int"},deaths:{type:"Int"},suicides:{type:"Int"},totalDamage:{type:"Float"},score:{type:"Int"},team:{type:"Team"},steamUser:{type:"SteamUser"},__typename:{type:"String"}},scalar:["steamId64","kills","deaths","suicides","totalDamage","score","team"]},Team:{name:"Team"},SteamUser:{name:"SteamUser",fields:{steamId64:{type:"String"},name:{type:"String"},avatarBigUrl:{type:"String"},avatarMediumUrl:{type:"String"},__typename:{type:"String"}},scalar:["steamId64","name","avatarBigUrl","avatarMediumUrl"]},PlayerRoundWeaponStats:{name:"PlayerRoundWeaponStats",fields:{steamId64:{type:"String"},round:{type:"Round"},weapon:{type:"Weapon"},totalDamage:{type:"Float"},shotsHead:{type:"Int"},shotsChest:{type:"Int"},shotsLegs:{type:"Int"},shotsArms:{type:"Int"},shotsFired:{type:"Int"},steamUser:{type:"SteamUser"},__typename:{type:"String"}},scalar:["steamId64","totalDamage","shotsHead","shotsChest","shotsLegs","shotsArms","shotsFired"]},Weapon:{name:"Weapon",fields:{name:{type:"String"},weaponType:{type:"WeaponType"},__typename:{type:"String"}},scalar:["name","weaponType"]},WeaponType:{name:"WeaponType"},RoundQuery:{name:"RoundQuery",fields:{page:{type:"Int"},pageSize:{type:"Int"},orderDesc:{type:"Boolean"},gameId:{type:"String"},startedAfter:{type:"DateTime"},startedBefore:{type:"DateTime"},onlyFinishedRounds:{type:"Boolean"},__typename:{type:"String"}},scalar:["page","pageSize","orderDesc","gameId","startedAfter","startedBefore","onlyFinishedRounds"]},PaginatedRound:{name:"PaginatedRound",fields:{content:{type:"Round"},totalCount:{type:"Int"},pageCount:{type:"Int"},__typename:{type:"String"}},scalar:["totalCount","pageCount"]},PaginatedGameMode:{name:"PaginatedGameMode",fields:{content:{type:"GameMode"},totalCount:{type:"Int"},pageCount:{type:"Int"},__typename:{type:"String"}},scalar:["totalCount","pageCount"]},PlayerRoundStatsQuery:{name:"PlayerRoundStatsQuery",fields:{page:{type:"Int"},pageSize:{type:"Int"},roundId:{type:"Int"},__typename:{type:"String"}},scalar:["page","pageSize","roundId"]},PaginatedPlayerRoundStats:{name:"PaginatedPlayerRoundStats",fields:{content:{type:"PlayerRoundStats"},totalCount:{type:"Int"},pageCount:{type:"Int"},__typename:{type:"String"}},scalar:["totalCount","pageCount"]},PlayerRoundWeaponStatsQuery:{name:"PlayerRoundWeaponStatsQuery",fields:{page:{type:"Int"},pageSize:{type:"Int"},roundId:{type:"Int"},__typename:{type:"String"}},scalar:["page","pageSize","roundId"]},PaginatedPlayerRoundWeaponStats:{name:"PaginatedPlayerRoundWeaponStats",fields:{content:{type:"PlayerRoundWeaponStats"},totalCount:{type:"Int"},pageCount:{type:"Int"},__typename:{type:"String"}},scalar:["totalCount","pageCount"]},PlayerStatisticsQuery:{name:"PlayerStatisticsQuery",fields:{steamId64:{type:"String"},page:{type:"Int"},pageSize:{type:"Int"},orderDesc:{type:"Boolean"},orderBy:{type:"OrderPlayerBaseStats"},gameModeName:{type:"String"},roundId:{type:"Int"},gameId:{type:"String"},startedAfter:{type:"DateTime"},startedBefore:{type:"DateTime"},endedAfter:{type:"DateTime"},endedBefore:{type:"DateTime"},onlyFinishedRounds:{type:"Boolean"},cachedIfPossible:{type:"Boolean"},ranked:{type:"Boolean"},__typename:{type:"String"}},scalar:["steamId64","page","pageSize","orderDesc","orderBy","gameModeName","roundId","gameId","startedAfter","startedBefore","endedAfter","endedBefore","onlyFinishedRounds","cachedIfPossible","ranked"]},OrderPlayerBaseStats:{name:"OrderPlayerBaseStats"},PaginatedPlayerStatistics:{name:"PaginatedPlayerStatistics",fields:{content:{type:"PlayerStatistics"},totalCount:{type:"Int"},pageCount:{type:"Int"},__typename:{type:"String"}},scalar:["totalCount","pageCount"]},PlayerStatistics:{name:"PlayerStatistics",fields:{steamId64:{type:"String"},rank:{type:"Int"},kills:{type:"Int"},deaths:{type:"Int"},suicides:{type:"Int"},killDeathRatio:{type:"Float"},totalScore:{type:"Int"},totalDamage:{type:"Float"},numberGamesPlayed:{type:"Int"},numberRoundsPlayed:{type:"Int"},avgDamagePerRound:{type:"Float"},avgScorePerRound:{type:"Float"},steamUser:{type:"SteamUser"},__typename:{type:"String"}},scalar:["steamId64","rank","kills","deaths","suicides","killDeathRatio","totalScore","totalDamage","numberGamesPlayed","numberRoundsPlayed","avgDamagePerRound","avgScorePerRound"]},PlayerWeaponStatisticsQuery:{name:"PlayerWeaponStatisticsQuery",fields:{steamId64:{type:"String"},gameModeName:{type:"String"},roundId:{type:"Int"},gameId:{type:"String"},startedAfter:{type:"DateTime"},startedBefore:{type:"DateTime"},endedAfter:{type:"DateTime"},endedBefore:{type:"DateTime"},onlyFinishedRounds:{type:"Boolean"},__typename:{type:"String"}},scalar:["steamId64","gameModeName","roundId","gameId","startedAfter","startedBefore","endedAfter","endedBefore","onlyFinishedRounds"]},PlayerWeaponStatistics:{name:"PlayerWeaponStatistics",fields:{steamId64:{type:"String"},totalDamage:{type:"Float"},totalShots:{type:"Int"},shotsChest:{type:"Int"},shotsLegs:{type:"Int"},shotsArms:{type:"Int"},shotsHead:{type:"Int"},weapon:{type:"Weapon"},steamUser:{type:"SteamUser"},__typename:{type:"String"}},scalar:["steamId64","totalDamage","totalShots","shotsChest","shotsLegs","shotsArms","shotsHead"]},GameserversQuery:{name:"GameserversQuery",fields:{page:{type:"Int"},pageSize:{type:"Int"},orderDesc:{type:"Boolean"},orderBy:{type:"GameserverConfigOrder"},search:{type:"String"},configFilter:{type:"GameserverConfigFilter"},__typename:{type:"String"}},scalar:["page","pageSize","orderDesc","orderBy","search","configFilter"]},GameserverConfigOrder:{name:"GameserverConfigOrder"},GameserverConfigFilter:{name:"GameserverConfigFilter"},PaginatedGameserver:{name:"PaginatedGameserver",fields:{content:{type:"Gameserver"},totalCount:{type:"Int"},pageCount:{type:"Int"},__typename:{type:"String"}},scalar:["totalCount","pageCount"]},GameserverQuery:{name:"GameserverQuery",fields:{id:{type:"String"},authKey:{type:"String"},__typename:{type:"String"}},scalar:["id","authKey"]},RegisteredPlayersQuery:{name:"RegisteredPlayersQuery",fields:{page:{type:"Int"},pageSize:{type:"Int"},search:{type:"String"},__typename:{type:"String"}},scalar:["page","pageSize","search"]},PaginatedRegisteredPlayers:{name:"PaginatedRegisteredPlayers",fields:{content:{type:"RegisteredPlayer"},totalCount:{type:"Int"},pageCount:{type:"Int"},__typename:{type:"String"}},scalar:["totalCount","pageCount"]},RegisteredPlayer:{name:"RegisteredPlayer",fields:{steamId64:{type:"String"},visibleRole:{type:"String"},rootAdmin:{type:"Boolean"},kick:{type:"Boolean"},ban:{type:"Boolean"},tempKickBan:{type:"Boolean"},mute:{type:"Boolean"},makeTeams:{type:"Boolean"},reservedSlots:{type:"Boolean"},broadcastMessage:{type:"Boolean"},gameControl:{type:"Boolean"},steamUser:{type:"SteamUser"},__typename:{type:"String"}},scalar:["steamId64","visibleRole","rootAdmin","kick","ban","tempKickBan","mute","makeTeams","reservedSlots","broadcastMessage","gameControl"]},RegisteredPlayerQuery:{name:"RegisteredPlayerQuery",fields:{id:{type:"Int"},steamId64:{type:"String"},__typename:{type:"String"}},scalar:["id","steamId64"]},BanQuery:{name:"BanQuery",fields:{page:{type:"Int"},pageSize:{type:"Int"},search:{type:"String"},steamId64:{type:"String"},bannedBySteamId64:{type:"String"},id1:{type:"String"},id2:{type:"String"},orderDesc:{type:"Boolean"},orderByExpirationDate:{type:"Boolean"},noExpiredBans:{type:"Boolean"},__typename:{type:"String"}},scalar:["page","pageSize","search","steamId64","bannedBySteamId64","id1","id2","orderDesc","orderByExpirationDate","noExpiredBans"]},PaginatedBan:{name:"PaginatedBan",fields:{content:{type:"Ban"},totalCount:{type:"Int"},pageCount:{type:"Int"},__typename:{type:"String"}},scalar:["totalCount","pageCount"]},Ban:{name:"Ban",fields:{id:{type:"String"},steamId64:{type:"String"},bannedById64:{type:"String"},createdAt:{type:"DateTime"},expiredAt:{type:"DateTime"},reason:{type:"String"},gameserver:{type:"Gameserver"},id1:{type:"String"},id2:{type:"String"},bannedSteamUser:{type:"SteamUser"},bannedBySteamUser:{type:"SteamUser"},__typename:{type:"String"}},scalar:["id","steamId64","bannedById64","createdAt","expiredAt","reason","id1","id2"]},BanCheck:{name:"BanCheck",fields:{steamId64:{type:"String"},id1:{type:"String"},id2:{type:"String"},banId:{type:"String"},checkBanlistPartners:{type:"Boolean"},__typename:{type:"String"}},scalar:["steamId64","id1","id2","banId","checkBanlistPartners"]},GameserverConfigsQuery:{name:"GameserverConfigsQuery",fields:{page:{type:"Int"},pageSize:{type:"Int"},search:{type:"String"},orderDesc:{type:"Boolean"},orderByGameserverName:{type:"Boolean"},__typename:{type:"String"}},scalar:["page","pageSize","search","orderDesc","orderByGameserverName"]},PaginatedGameserverConfig:{name:"PaginatedGameserverConfig",fields:{content:{type:"GameserverConfig"},totalCount:{type:"Int"},pageCount:{type:"Int"},__typename:{type:"String"}},scalar:["totalCount","pageCount"]},GameserverConfigQuery:{name:"GameserverConfigQuery",fields:{id:{type:"String"},authKey:{type:"String"},__typename:{type:"String"}},scalar:["id","authKey"]},MatchConfigsQuery:{name:"MatchConfigsQuery",fields:{page:{type:"Int"},pageSize:{type:"Int"},configName:{type:"String"},orderDesc:{type:"Boolean"},__typename:{type:"String"}},scalar:["page","pageSize","configName","orderDesc"]},PaginatedMatchConfig:{name:"PaginatedMatchConfig",fields:{content:{type:"MatchConfig"},totalCount:{type:"Int"},pageCount:{type:"Int"},__typename:{type:"String"}},scalar:["totalCount","pageCount"]},MatchConfigQuery:{name:"MatchConfigQuery",fields:{id:{type:"Int"},configName:{type:"Int"},__typename:{type:"String"}},scalar:["id","configName"]},AuthKeyQuery:{name:"AuthKeyQuery",fields:{page:{type:"Int"},pageSize:{type:"Int"},search:{type:"String"},orderDesc:{type:"Boolean"},__typename:{type:"String"}},scalar:["page","pageSize","search","orderDesc"]},PaginatedAuthKey:{name:"PaginatedAuthKey",fields:{content:{type:"AuthKey"},totalCount:{type:"Int"},pageCount:{type:"Int"},__typename:{type:"String"}},scalar:["totalCount","pageCount"]},AuthKey:{name:"AuthKey",fields:{id:{type:"Int"},authKey:{type:"String"},description:{type:"String"},lastUse:{type:"DateTime"},__typename:{type:"String"}},scalar:["id","authKey","description","lastUse"]},AppConfig:{name:"AppConfig",fields:{instanceId:{type:"String"},publicStats:{type:"Boolean"},banlistPartners:{type:"String"},publicBanQuery:{type:"Boolean"},masterserverKey:{type:"String"},steamWebApiKey:{type:"String"},ownAddress:{type:"String"},playerStatsCacheAge:{type:"Int"},minScoreStats:{type:"Int"},appInfo:{type:"AppInfo"},__typename:{type:"String"}},scalar:["instanceId","publicStats","banlistPartners","publicBanQuery","masterserverKey","steamWebApiKey","ownAddress","playerStatsCacheAge","minScoreStats"]},AppInfo:{name:"AppInfo",fields:{gamesPlayed:{type:"Int"},roundsPlayed:{type:"Int"},activeBans:{type:"Int"},uniquePlayers:{type:"Int"},__typename:{type:"String"}},scalar:["gamesPlayed","roundsPlayed","activeBans","uniquePlayers"]},Mutation:{name:"Mutation",fields:{deleteGames:{type:"Boolean",args:{gameInputs:["[GameInput!]!","GameInput"]}},createUpdateGame:{type:"Game",args:{gameInput:["GameInput!","GameInput"]}},deleteRounds:{type:"Boolean",args:{roundInputs:["[RoundInput!]!","RoundInput"]}},createUpdateRound:{type:"Round",args:{roundInput:["RoundInput!","RoundInput"]}},createUpdatePlayerRoundStats:{type:"Boolean",args:{playerRoundStatsInput:["[PlayerRoundStatsInput!]!","PlayerRoundStatsInput"]}},createUpdatePlayerRoundWeaponStats:{type:"Boolean",args:{playerRoundWeaponStatsInput:["[PlayerRoundWeaponStatsInput!]!","PlayerRoundWeaponStatsInput"]}},deleteGameserver:{type:"Boolean",args:{gameserverId:["String!","String"]}},createUpdateGameserver:{type:"Gameserver",args:{gameserver:["GameserverInput!","GameserverInput"]}},updateGameserver:{type:"Gameserver",args:{gameserverUpdate:["GameserverUpdateInput!","GameserverUpdateInput"]}},deleteRegisteredPlayer:{type:"Boolean",args:{steamId64:["String!","String"]}},createUpdateRegisteredPlayer:{type:"RegisteredPlayer",args:{registeredPlayer:["RegisteredPlayerInput!","RegisteredPlayerInput"]}},deleteBan:{type:"Boolean",args:{banId:["String!","String"]}},createUpdateBan:{type:"Ban",args:{banInput:["BanInput!","BanInput"]}},authPlayerToken:{type:"String",args:{steamId64:["String!","String"]}},deleteGameserverConfig:{type:"Boolean",args:{gameserverId:["String!","String"]}},createUpdateGameserverConfig:{type:"GameserverConfig",args:{gameserverConfig:["GameserverConfigInput!","GameserverConfigInput"]}},assignMatchConfig:{type:"GameserverConfig",args:{gameserverConfig:["GameserverConfigInput!","GameserverConfigInput"]}},deleteMatchConfig:{type:"Boolean",args:{options:["MatchConfigQuery!","MatchConfigQuery"]}},createUpdateMatchConfig:{type:"MatchConfig",args:{matchConfig:["MatchConfigInput!","MatchConfigInput"]}},deleteAuthKey:{type:"Boolean",args:{authKey:["String!","String"]}},createUpdateAuthKey:{type:"AuthKey",args:{authKey:["AuthKeyInput!","AuthKeyInput"]}},login:{type:"LoginResponse",args:{password:["String!","String"]}},loginDev:{type:"LoginResponse",args:{password:["String!","String"]}},updateAppConfig:{type:"AppConfig",args:{appConfig:["AppConfigInput!","AppConfigInput"]}},__typename:{type:"String"}},scalar:["deleteGames","deleteRounds","createUpdatePlayerRoundStats","createUpdatePlayerRoundWeaponStats","deleteGameserver","deleteRegisteredPlayer","deleteBan","authPlayerToken","deleteGameserverConfig","deleteMatchConfig","deleteAuthKey"]},GameInput:{name:"GameInput",fields:{id:{type:"String"},gameserverId:{type:"String"},matchConfigId:{type:"Int"},startedAt:{type:"DateTime"},endedAt:{type:"DateTime"},map:{type:"ServerMapInput"},gameMode:{type:"GameModeInput"},__typename:{type:"String"}},scalar:["id","gameserverId","matchConfigId","startedAt","endedAt"]},RoundInput:{name:"RoundInput",fields:{id:{type:"Int"},gameId:{type:"String"},startedAt:{type:"DateTime"},endedAt:{type:"DateTime"},scoreSpecialForces:{type:"Int"},scoreTerrorists:{type:"Int"},__typename:{type:"String"}},scalar:["id","gameId","startedAt","endedAt","scoreSpecialForces","scoreTerrorists"]},PlayerRoundStatsInput:{name:"PlayerRoundStatsInput",fields:{roundId:{type:"Int"},steamId64:{type:"String"},kills:{type:"Int"},deaths:{type:"Int"},suicides:{type:"Int"},totalDamage:{type:"Float"},score:{type:"Int"},team:{type:"Team"},__typename:{type:"String"}},scalar:["roundId","steamId64","kills","deaths","suicides","totalDamage","score","team"]},PlayerRoundWeaponStatsInput:{name:"PlayerRoundWeaponStatsInput",fields:{roundId:{type:"Int"},steamId64:{type:"String"},weapon:{type:"WeaponInput"},totalDamage:{type:"Float"},shotsHead:{type:"Int"},shotsChest:{type:"Int"},shotsLegs:{type:"Int"},shotsArms:{type:"Int"},shotsFired:{type:"Int"},__typename:{type:"String"}},scalar:["roundId","steamId64","totalDamage","shotsHead","shotsChest","shotsLegs","shotsArms","shotsFired"]},WeaponInput:{name:"WeaponInput",fields:{name:{type:"String"},weaponType:{type:"WeaponType"},__typename:{type:"String"}},scalar:["name","weaponType"]},GameserverInput:{name:"GameserverInput",fields:{id:{type:"String"},authKey:{type:"String"},currentName:{type:"String"},description:{type:"String"},__typename:{type:"String"}},scalar:["id","authKey","currentName","description"]},GameserverUpdateInput:{name:"GameserverUpdateInput",fields:{currentName:{type:"String"},__typename:{type:"String"}},scalar:["currentName"]},RegisteredPlayerInput:{name:"RegisteredPlayerInput",fields:{steamId64:{type:"String"},rootAdmin:{type:"Boolean"},visibleRole:{type:"String"},kick:{type:"Boolean"},ban:{type:"Boolean"},tempKickBan:{type:"Boolean"},mute:{type:"Boolean"},makeTeams:{type:"Boolean"},reservedSlots:{type:"Boolean"},broadcastMessage:{type:"Boolean"},gameControl:{type:"Boolean"},__typename:{type:"String"}},scalar:["steamId64","rootAdmin","visibleRole","kick","ban","tempKickBan","mute","makeTeams","reservedSlots","broadcastMessage","gameControl"]},BanInput:{name:"BanInput",fields:{banId:{type:"String"},steamId64:{type:"String"},id1:{type:"String"},id2:{type:"String"},bannedById64:{type:"String"},expiredAt:{type:"DateTime"},reason:{type:"String"},gameserverId:{type:"String"},__typename:{type:"String"}},scalar:["banId","steamId64","id1","id2","bannedById64","expiredAt","reason","gameserverId"]},GameserverConfigInput:{name:"GameserverConfigInput",fields:{gameserverId:{type:"String"},currentMatchConfigId:{type:"Int"},currentGameserverName:{type:"String"},voteLength:{type:"Int"},tempKickBanTime:{type:"Int"},gamePassword:{type:"String"},serverAdmins:{type:"String"},serverDescription:{type:"String"},website:{type:"String"},contact:{type:"String"},reservedSlots:{type:"Int"},mapNoReplay:{type:"Int"},balanceClans:{type:"Boolean"},allowSkipMapVote:{type:"Boolean"},autoRecordReplay:{type:"Boolean"},playerGameControl:{type:"Boolean"},enableMapVote:{type:"Boolean"},enableVoicechat:{type:"Boolean"},__typename:{type:"String"}},scalar:["gameserverId","currentMatchConfigId","currentGameserverName","voteLength","tempKickBanTime","gamePassword","serverAdmins","serverDescription","website","contact","reservedSlots","mapNoReplay","balanceClans","allowSkipMapVote","autoRecordReplay","playerGameControl","enableMapVote","enableVoicechat"]},MatchConfigInput:{name:"MatchConfigInput",fields:{id:{type:"Int"},configName:{type:"String"},gameMode:{type:"GameModeInput"},matchEndLength:{type:"Int"},warmUpLength:{type:"Int"},mapLength:{type:"Int"},roundLength:{type:"Int"},preRoundLength:{type:"Int"},roundEndLength:{type:"Int"},roundLimit:{type:"Int"},midGameBreakLength:{type:"Int"},friendlyFireScale:{type:"Float"},playerVoteThreshold:{type:"Float"},maxTeamDamage:{type:"Int"},allowGhostcam:{type:"Boolean"},autoBalanceTeams:{type:"Boolean"},playerVoteTeamOnly:{type:"Boolean"},enablePlayerVote:{type:"Boolean"},autoSwapTeams:{type:"Boolean"},nadeRestriction:{type:"Boolean"},globalVoicechat:{type:"Boolean"},muteDeadToTeam:{type:"Boolean"},ranked:{type:"Boolean"},private:{type:"Boolean"},__typename:{type:"String"}},scalar:["id","configName","matchEndLength","warmUpLength","mapLength","roundLength","preRoundLength","roundEndLength","roundLimit","midGameBreakLength","friendlyFireScale","playerVoteThreshold","maxTeamDamage","allowGhostcam","autoBalanceTeams","playerVoteTeamOnly","enablePlayerVote","autoSwapTeams","nadeRestriction","globalVoicechat","muteDeadToTeam","ranked","private"]},AuthKeyInput:{name:"AuthKeyInput",fields:{id:{type:"Int"},authKey:{type:"String"},description:{type:"String"},__typename:{type:"String"}},scalar:["id","authKey","description"]},LoginResponse:{name:"LoginResponse",fields:{appConfig:{type:"AppConfig"},jwt:{type:"String"},__typename:{type:"String"}},scalar:["jwt"]},AppConfigInput:{name:"AppConfigInput",fields:{publicStats:{type:"Boolean"},banlistPartners:{type:"String"},publicBanQuery:{type:"Boolean"},masterserverKey:{type:"String"},steamWebApiKey:{type:"String"},playerStatsCacheAge:{type:"Int"},minScoreStats:{type:"Int"},ownAddress:{type:"String"},password:{type:"String"},__typename:{type:"String"}},scalar:["publicStats","banlistPartners","publicBanQuery","masterserverKey","steamWebApiKey","playerStatsCacheAge","minScoreStats","ownAddress","password"]}};function V(e=""){const t=p.linkTypeMap(N);let a="";return{client:p.createClient({fetcher:({query:t,variables:n},r)=>r(window.location.origin+"/graphql",{method:"POST",body:JSON.stringify({query:t,variables:n}),headers:""===e?{"Content-Type":"application/json",Accept:"application/json","x-request-id":a}:{Authorization:"Bearer "+e,"Content-Type":"application/json",Accept:"application/json","x-request-id":a}}).then((e=>e.json())),queryRoot:t.Query,mutationRoot:t.Mutation}),setTransactionId:e=>a=e}}var z=function(e,t,a,n){var r,s=arguments.length,o=s<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,a):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,a,n);else for(var i=e.length-1;i>=0;i--)(r=e[i])&&(o=(s<3?r(o):s>3?r(t,a,o):r(t,a))||o);return s>3&&o&&Object.defineProperty(t,a,o),o};const H=class{constructor(t){e(this,t),this.login=r(this,"login",7),this.logout=r(this,"logout",7),this.navbarActive=!1,this.navbarItems=[{title:"Home",url:"/"},{title:"Player Statistics",url:"/player-statistics",condition:()=>{var e;return!!this.isAdmin||!!(null===(e=this.appConfig)||void 0===e?void 0:e.publicStats)}},{title:"Gameserver Config",url:"/gameserver-config",condition:()=>!!this.isAdmin},{title:"Settings",children:[{title:"TO4ST",url:"/to4st-settings"},{title:"Gameservers",url:"/gameserver-settings"},{title:"Registered Players",url:"/registered-players"}],condition:()=>!!this.isAdmin}],this.isAdmin=!1}goHome(){this.history.replace("/",{})}render(){return t(s,null,t("nav",{class:"navbar is-fixed-top",role:"navigation","aria-label":"main navigation"},t("div",{class:"navbar-brand"},t("a",{class:"navbar-item",href:"https://to4.co"},t("img",{src:"./assets/to4stCoreLogo.png",width:"198",height:"19"})),t("a",{role:"button",class:{"navbar-burger":!0,burger:!0,"is-active":this.navbarActive},"aria-label":"menu","aria-expanded":"false",onClick:()=>this.navbarActive=!this.navbarActive},t("span",{"aria-hidden":"true"}),t("span",{"aria-hidden":"true"}),t("span",{"aria-hidden":"true"}))),t("div",{class:{"navbar-menu":!0,"is-active":this.navbarActive}},t("div",{class:"navbar-start"},this.navbarItems.filter((e=>{var t,a;return null===(a=null===(t=e.condition)||void 0===t?void 0:t.call(e))||void 0===a||a})).map((e=>e.children?this.renderNavDropdown(e):this.renderNavItem(e)))),t("div",{class:"navbar-end"},t("div",{class:"navbar-item"},t("a",{class:{"button is-light":!0},onClick:()=>this.isAdmin?this.logout.emit():this.login.emit()},this.isAdmin?"Logout":"Login"))))))}renderNavDropdown(e){return t("a",{class:"navbar-item has-dropdown is-hoverable"},t("a",{class:"navbar-link"},e.title),t("div",{class:"navbar-dropdown"},e.children.filter((e=>{var t,a;return null===(a=null===(t=e.condition)||void 0===t?void 0:t.call(e))||void 0===a||a})).map((e=>this.renderNavItem(e)))))}renderNavItem(e){return t("stencil-route-link",{class:"navbar-item",anchorClass:"navbar-link is-arrowless",url:e.url,exact:!0},e.title)}};z([i.Context("appConfig")],H.prototype,"appConfig",void 0),z([i.Context("isAdmin")],H.prototype,"isAdmin",void 0),o.injectProps(H,["history","location"]),H.style=":host{position:absolut;z-index:100 !important}";const q=class{constructor(t){e(this,t),this.close=r(this,"close",7),this.successfulLogin=r(this,"successfulLogin",7),this.currentError="",this.apiClient={}}async login(){var e;if((null===(e=this.currentPw)||void 0===e?void 0:e.length)>0){try{const e=await this.apiClient.client.chain.mutation.login({password:l(this.currentPw)}).execute({jwt:!0,appConfig:{instanceId:!0,publicStats:!0,publicBanQuery:!0,banlistPartners:!0,masterserverKey:!0,steamWebApiKey:!0,ownAddress:!0,appInfo:{uniquePlayers:!0,gamesPlayed:!0,roundsPlayed:!0,activeBans:!0}}});this.successfulLogin.emit({appconfig:e.appConfig,token:e.jwt})}catch(e){this.currentError=y(e)}this.currentPw=""}}render(){return t(s,null,t("div",{class:{modal:!0,"is-active":this.visible}},t("div",{class:"modal-background"}),t("div",{class:"modal-card"},t("header",{class:"modal-card-head"},t("p",{class:"modal-card-title"},"Login"),t("button",{class:"delete","aria-label":"close",onClick:()=>this.close.emit()})),t("section",{class:"modal-card-body"},t("form",{onSubmit:e=>{e.preventDefault(),this.login()}},t("div",{class:{"notification is-danger":!0,"is-hidden":0==this.currentError.length}},t("button",{class:"delete",onClick:()=>this.currentError=""}),this.currentError),t("div",{class:"field has-addons"},t("p",{class:"control"},t("input",{type:"password",class:{input:!0,"is-danger":this.currentError.length>0},placeholder:"Password",value:this.currentPw,onChange:e=>this.currentPw=e.target.value.trim()})),t("p",{class:"control"},t("a",{class:"button is-primary",onClick:()=>this.login()},"Login"))))))))}};function $(e){this.message=e}(function(e,t,a,n){var r,s=arguments.length,o=s<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,a):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,a,n);else for(var i=e.length-1;i>=0;i--)(r=e[i])&&(o=(s<3?r(o):s>3?r(t,a,o):r(t,a))||o);s>3&&o&&Object.defineProperty(t,a,o)})([i.Context("api")],q.prototype,"apiClient",void 0),q.style=":host{display:block}",($.prototype=new Error).name="InvalidCharacterError";var J="undefined"!=typeof window&&window.atob&&window.atob.bind(window)||function(e){var t=String(e).replace(/=+$/,"");if(t.length%4==1)throw new $("'atob' failed: The string to be decoded is not correctly encoded.");for(var a,n,r=0,s=0,o="";n=t.charAt(s++);~n&&(a=r%4?64*a+n:n,r++%4)?o+=String.fromCharCode(255&a>>(-2*r&6)):0)n="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".indexOf(n);return o};function Y(e){this.message=e}(Y.prototype=new Error).name="InvalidTokenError";var X=function(e,t){if("string"!=typeof e)throw new Y("Invalid token specified");var a=!0===(t=t||{}).header?0:1;try{return JSON.parse(function(e){var t=e.replace(/-/g,"+").replace(/_/g,"/");switch(t.length%4){case 0:break;case 2:t+="==";break;case 3:t+="=";break;default:throw"Illegal base64url string!"}try{return function(e){return decodeURIComponent(J(e).replace(/(.)/g,(function(e,t){var a=t.charCodeAt(0).toString(16).toUpperCase();return a.length<2&&(a="0"+a),"%"+a})))}(t)}catch(e){return J(t)}}(e.split(".")[a]))}catch(e){throw new Y("Invalid token specified: "+e.message)}};X.InvalidTokenError=Y;var Z=function(e,t,a,n){var r,s=arguments.length,o=s<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,a):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,a,n);else for(var i=e.length-1;i>=0;i--)(r=e[i])&&(o=(s<3?r(o):s>3?r(t,a,o):r(t,a))||o);return s>3&&o&&Object.defineProperty(t,a,o),o};const ee="TO4ST-core_Token",te=class{constructor(t){e(this,t)}async refreshAppConfig(e=null){if(e)this.appConfig=e;else try{this.appConfig=await this.api.client.chain.query.appConfig({cached:!this.isAdmin}).execute({instanceId:!0,publicStats:!0,publicBanQuery:!0,banlistPartners:!0,masterserverKey:!0,steamWebApiKey:!0,ownAddress:!0,minScoreStats:!0,playerStatsCacheAge:!0,appInfo:{uniquePlayers:!0,gamesPlayed:!0,roundsPlayed:!0,activeBans:!0}})}catch(e){console.error(e)}}async componentWillLoad(){const e=localStorage.getItem(ee);this.api=V();const t=(null==e?void 0:e.length)>0?X(e):null;if(null==t?void 0:t.exp){const a=new Date(1e3*t.exp),n=new Date((new Date).valueOf()-864e5);if(a.valueOf()>n.valueOf()){this.api=V(e);try{await this.api.client.chain.query.authValid.execute()?this.isAdmin=!0:(localStorage.removeItem(ee),this.api=V())}catch(e){localStorage.removeItem(ee),this.api=V(),console.error(e)}}}await this.refreshAppConfig()}async afterSuccessfulLogin(e){localStorage.setItem(ee,e.token),this.isAdmin=!0,this.appConfig=e.appconfig,this.loginOpen=!1,this.api=await V(e.token)}logout(){this.isAdmin=!1,localStorage.removeItem(ee)}render(){return t("div",null,t("to4st-header",{onLogin:()=>this.loginOpen=!0,onLogout:()=>this.logout()}),t("to4st-login-modal",{visible:this.loginOpen,onClose:()=>this.loginOpen=!1,onSuccessfulLogin:e=>this.afterSuccessfulLogin(e.detail)}),t("main",null,t("stencil-router",null,t("stencil-route-switch",{scrollTopOffset:0},t("stencil-route",{url:"/",component:"to4st-home",exact:!0}),t("stencil-route",{url:"/gameserver-config",component:"to4st-gameserver-config"}),t("stencil-route",{url:"/to4st-settings",component:"to4st-settings"}),t("stencil-route",{url:"/gameserver-settings",component:"to4st-gameserver-settings"}),t("stencil-route",{url:"/registered-players",component:"to4st-registered-players-settings"}),t("stencil-route",{url:"/player-statistics",component:"to4st-player-statistics"})))))}};Z([i.Provide("api")],te.prototype,"api",void 0),Z([i.Provide("appConfig")],te.prototype,"appConfig",void 0),Z([i.Provide("isAdmin")],te.prototype,"isAdmin",void 0),te.style="to4st-root{overflow-y:auto}";export{k as stencil_route,Q as stencil_route_link,U as stencil_route_switch,x as stencil_router,H as to4st_header,q as to4st_login_modal,te as to4st_root}