import{f as t}from"./p-a65b63bc.js";const i=(...t)=>i.debug&&console.log(...t);i.debug=!1;const s=i,r=()=>{};function h(t,i,h){const n=t[i]||r;t[i]=async function(...t){s(i,this);const r=await h(this);let o=await n.apply(this,t);return r instanceof Function&&await r(this),o}}const n=Symbol.for("stencil-quantum-providers");class o{constructor(i,r){this.key=i,this.value=r,this.listeners=[],this.hooks=new Map,this.mutable=!1,this.paused=!1,this.retrieve=()=>this.value,this.provide=t=>{s("PROVIDING",t,"to",this.listeners);let i=this.value;return this.value=t,this.paused||this.listeners.filter(t=>!t.paused).forEach(s=>s.action(t,i)),this},this.update=t=>this.provide(t(this.retrieve())),this.listen=(t,i=!0)=>{s("LISTEN",i,this,t);const r={action:t,unlisten:()=>this.unlisten(t),paused:!1};return this.listeners=[...this.listeners,r],i&&t(this.value),r},this.unlisten=t=>{this.listeners=this.listeners.filter(i=>i.action!==t)},this.attach=(t,i)=>{s("Add Provider",t,this);const r=o.getAttached(t);return r.includes(this)||r.push(this),s("Total Providers",t,r),i?this:this.hook(t)},this.isHooked=t=>this.hooks.has(t),this.getHook=t=>this.hooks.get(t),this.hook=i=>(s("Hook Provider",i,this),this.hooks.set(i,this.listen(()=>t(i))),this),this.pauseHook=(t,i=!0)=>{s("Pausing Hook",i),this.isHooked(t)&&(this.getHook(t).paused=i)},this.unhook=t=>{var i;return s("Unhook Provider",t,this),this.isHooked(t)&&(null===(i=this.hooks.get(t))||void 0===i||i.unlisten(),this.hooks.delete(t)),this},this.destroy=()=>{this.listeners=[],this.hooks=new Map}}pause(t=!0){this.paused=t}static makeFilter(t,i){return s=>s.key===t||i&&"string"==typeof t&&s.key===i+"__"+t}static find(t,i,r){var h,n,e,c;s("Searching Provider",i,r,t);const u=o.getAttached(t).filter(o.makeFilter(i,r));if(u.length>1)throw new a(`Found multiple "${String(i)}" providers on the same object!`);if(1===u.length)return u[0];let l=null!==(e=null!==(h=t.parentElement)&&void 0!==h?h:null===(n=t.shadowRoot)||void 0===n?void 0:n.host)&&void 0!==e?e:null===(c=t.parentNode)||void 0===c?void 0:c.host;if(!l)throw new a(`No provider in hierarchy found that matches "${String(i)}"!`);return o.find(l,i,r).attach(t,!0)}static create(t,i,r,h){return"string"==typeof i&&(i=(h?h+"__":"")+i),s("Create Provider",t,i,r),new o(i,r).attach(t)}static getAttached(t){return t[n]instanceof Array||(t[n]=[]),t[n]}}const e=Symbol.for("stencil-quantum-error");class a extends Error{constructor(t,i){super(t instanceof Error?t.message:t),this.target=i,t instanceof Error&&Object.assign(this,t)}}function c(t,i){const s=new a(i,t);console.error(s);try{o.find(t,e).provide(s)}catch(t){throw s}}export{o as P,h,c as t}