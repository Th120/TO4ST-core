"""
Exposes a URL that specifies the behaviour of this scalar.
"""
directive @specifiedBy(
  """
  The URL that specifies the behaviour of this scalar.
  """
  url: String!
) on SCALAR

type AppConfig {
  instanceId: String
  publicStats: Boolean
  banlistPartners: [String!]
  publicBanQuery: Boolean
  masterserverKey: String
  steamWebApiKey: String
  ownAddress: String
  appInfo: AppInfo!
}

input AppConfigInput {
  publicStats: Boolean
  banlistPartners: [String!]
  publicBanQuery: Boolean
  masterserverKey: String
  steamWebApiKey: String
  ownAddress: String
  password: String
}

type AppInfo {
  gamesPlayed: Int!
  roundsPlayed: Int!
  activeBans: Int!
  uniquePlayers: Int!
}

type AuthKey {
  id: Int!
  authKey: String!
  description: String!
  lastUse: DateTime!
}

input AuthKeyInput {
  id: Int
  authKey: String
  description: String
}

input AuthKeyQuery {
  page: Int
  pageSize: Int
  search: String
  orderDesc: Boolean
}

type Ban {
  id: String!
  steamId64: String!
  bannedById64: String
  createdAt: DateTime!
  expiredAt: DateTime!
  reason: String!
  gameserver: Gameserver
  id1: String
  id2: String
  bannedSteamUser: SteamUser
  bannedBySteamUser: SteamUser
}

input BanCheck {
  steamId64: String
  id1: String
  id2: String
  banId: String

  """
  Ignored if request does not include authentification.
  """
  checkBanlistPartners: Boolean
}

input BanInput {
  banId: String
  steamId64: String
  id1: String
  id2: String
  bannedById64: String
  expiredAt: DateTime
  reason: String
  gameserverId: String
}

input BanQuery {
  page: Int
  pageSize: Int
  search: String
  steamId64: String
  bannedBySteamId64: String
  id1: String
  id2: String
  orderDesc: Boolean
  orderByExpirationDate: Boolean
  noExpiredBans: Boolean
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Game {
  id: String!
  gameserver: Gameserver!
  startedAt: DateTime!
  endedAt: DateTime
  map: ServerMap!
  gameMode: GameMode!
  rounds: [Round!]!
}

input GameInput {
  id: String
  gameserverId: String
  startedAt: DateTime
  endedAt: DateTime
  map: ServerMapInput
  gameMode: GameModeInput
}

type GameMode {
  name: String!
  isTeamBased: Boolean!
}

input GameModeInput {
  name: String!
  isTeamBased: Boolean!
}

input GameQuery {
  page: Int
  pageSize: Int
  orderDesc: Boolean
  gameserverId: String
  startedAfter: DateTime
  startedBefore: DateTime
  map: ServerMapInput
  gameMode: GameModeInput
  onlyFinishedGames: Boolean
}

type Gameserver {
  id: String!
  authKey: String
  currentName: String!
  description: String
  lastContact: DateTime
}

input GameserverInput {
  id: String
  authKey: String
  currentName: String
  description: String
}

input GameserverQuery {
  id: String
  authKey: String
}

input GameserversQuery {
  page: Int
  pageSize: Int
  orderDesc: Boolean
  orderByCurrentName: Boolean
  search: String
}

input GameserverUpdateInput {
  currentName: String
}

type LoginResponse {
  appConfig: AppConfig!
  jwt: String!
}

type Mutation {
  deleteGames(gameInputs: [GameInput!]!): Boolean!

  """
  X-Request-ID must be set in header
  """
  createUpdateGame(gameInput: GameInput!): Game!
  deleteRounds(roundInputs: [RoundInput!]!): Boolean!

  """
  X-Request-ID must be set in header
  """
  createUpdateRound(roundInput: RoundInput!): Round!
  createUpdatePlayerRoundStats(playerRoundStatsInput: [PlayerRoundStatsInput!]!): Boolean!
  createUpdatePlayerRoundWeaponStats(playerRoundWeaponStatsInput: [PlayerRoundWeaponStatsInput!]!): Boolean!
  deleteGameserver(gameserverId: String!): Boolean!

  """
  X-Request-ID must be set in header
  """
  createUpdateGameserver(gameserver: GameserverInput!): Gameserver!

  """
  Only applies to gameserver key which is set for authorization
  """
  updateGameserver(gameserverUpdate: GameserverUpdateInput!): Gameserver!
  deleteRegisteredPlayer(steamId64: String!): Boolean!
  createUpdateRegisteredPlayer(registeredPlayer: RegisteredPlayerInput!): RegisteredPlayer!
  deleteBan(banId: String!): Boolean!

  """
  X-Request-ID must be set in header
  """
  createUpdateBan(banInput: BanInput!): Ban!
  authPlayerToken(steamId64: String!): String!
  deleteAuthKey(authKey: String!): Boolean!

  """
  X-Request-ID must be set in header
  """
  createUpdateAuthKey(authKey: AuthKeyInput!): AuthKey!
  login(password: String!): LoginResponse!
  loginDev(password: String!): LoginResponse!
  updateAppConfig(appConfig: AppConfigInput!): AppConfig!
}

enum OrderPlayerBaseStats {
  sumKills
  sumDeaths
  sumSuicides
  sumDamage
  killDeath
  averageScorePerRound
  averageDamagePerRound
  sumScore
  roundsPlayed
  gamesPlayed
}

type PaginatedAuthKey {
  content: [AuthKey!]
  totalCount: Int!
  pageCount: Int!
}

type PaginatedBan {
  content: [Ban!]
  totalCount: Int!
  pageCount: Int!
}

type PaginatedGame {
  content: [Game!]
  totalCount: Int!
  pageCount: Int!
}

type PaginatedGameMode {
  content: [GameMode!]
  totalCount: Int!
  pageCount: Int!
}

type PaginatedGameserver {
  content: [Gameserver!]
  totalCount: Int!
  pageCount: Int!
}

type PaginatedPlayerRoundStats {
  content: [PlayerRoundStats!]
  totalCount: Int!
  pageCount: Int!
}

type PaginatedPlayerRoundWeaponStats {
  content: [PlayerRoundWeaponStats!]
  totalCount: Int!
  pageCount: Int!
}

type PaginatedPlayerStatistics {
  content: [PlayerStatistics!]
  totalCount: Int!
  pageCount: Int!
}

type PaginatedRegisteredPlayers {
  content: [RegisteredPlayer!]
  totalCount: Int!
  pageCount: Int!
}

type PaginatedRound {
  content: [Round!]
  totalCount: Int!
  pageCount: Int!
}

type PlayerRoundStats {
  round: Round!
  steamId64: Int!
  kills: Int!
  deaths: Int!
  suicides: Int!
  totalDamage: Float!
  score: Int!
  team: Team!
  steamUser: SteamUser
}

input PlayerRoundStatsInput {
  roundId: Int!
  steamId64: String!
  kills: Int!
  deaths: Int!
  suicides: Int!
  totalDamage: Float!
  score: Int!
  team: Team!
}

input PlayerRoundStatsQuery {
  page: Int
  pageSize: Int
  roundId: Int!
}

type PlayerRoundWeaponStats {
  steamId64: String!
  round: Round!
  weapon: Weapon!
  totalDamage: Float!
  shotsHead: Int!
  shotsChest: Int!
  shotsLegs: Int!
  shotsArms: Int!
  shotsFired: Int!
  steamUser: SteamUser
}

input PlayerRoundWeaponStatsInput {
  roundId: Int!
  steamId64: String!
  weapon: WeaponInput!
  totalDamage: Float!
  shotsHead: Int!
  shotsChest: Int!
  shotsLegs: Int!
  shotsArms: Int!
  shotsFired: Int!
}

input PlayerRoundWeaponStatsQuery {
  page: Int
  pageSize: Int
  roundId: Int
}

type PlayerStatistics {
  steamId64: String!
  rank: Int!
  kills: Int!
  deaths: Int!
  suicides: Int!
  killDeathRatio: Float!
  totalScore: Int!
  totalDamage: Float!
  numberGamesPlayed: Int!
  numberRoundsPlayed: Int!
  avgDamagePerRound: Float!
  avgScorePerRound: Float!
  steamUser: SteamUser
}

input PlayerStatisticsQuery {
  steamId64: String
  page: Int
  pageSize: Int
  orderDesc: Boolean
  orderBy: OrderPlayerBaseStats
  gameModeName: String
  roundId: Int
  gameId: String
  startedAfter: DateTime
  startedBefore: DateTime
  endedAfter: DateTime
  endedBefore: DateTime
  onlyFinishedRounds: Boolean
}

type PlayerWeaponStatistics {
  steamId64: String!
  totalDamage: Float!
  totalShots: Int!
  shotsChest: Int!
  shotsLegs: Int!
  shotsArms: Int!
  shotsHead: Int!
  weapon: Weapon!
  steamUser: SteamUser
}

input PlayerWeaponStatisticsQuery {
  steamId64: String
  gameModeName: String
  roundId: Int
  gameId: String
  startedAfter: DateTime
  startedBefore: DateTime
  endedAfter: DateTime
  endedBefore: DateTime
  onlyFinishedRounds: Boolean
}

type Query {
  games(options: GameQuery!): PaginatedGame!
  game(gameId: String!): Game
  rounds(options: RoundQuery!): PaginatedRound!
  round(roundId: Float!): Round
  gameModes: PaginatedGameMode!
  playerRoundStats(options: PlayerRoundStatsQuery!): PaginatedPlayerRoundStats!
  playerRoundWeaponStats(options: PlayerRoundWeaponStatsQuery!): PaginatedPlayerRoundWeaponStats!
  playerStatistics(options: PlayerStatisticsQuery!): PaginatedPlayerStatistics!
  playerWeaponStatistics(options: PlayerWeaponStatisticsQuery!): [PlayerWeaponStatistics!]!
  gameservers(options: GameserversQuery!): PaginatedGameserver!
  gameserver(options: GameserverQuery!): Gameserver!
  registeredPlayers(options: RegisteredPlayersQuery!): PaginatedRegisteredPlayers!
  registeredPlayer(options: RegisteredPlayerQuery!): RegisteredPlayer
  bans(options: BanQuery!): PaginatedBan!
  banCheck(banCheck: BanCheck!): Ban
  authKeys(options: AuthKeyQuery!): PaginatedAuthKey!
  authKey(authKey: String!): AuthKey
  authValid: Boolean!
  appConfig(cached: Boolean = true): AppConfig!
}

type RegisteredPlayer {
  steamId64: String
  visibleRole: String
  rootAdmin: Boolean
  kick: Boolean
  ban: Boolean
  tempKickBan: Boolean
  mute: Boolean
  makeTeams: Boolean
  reservedSlots: Boolean
  broadcastMessage: Boolean
  gameControl: Boolean
  steamUser: SteamUser
}

input RegisteredPlayerInput {
  steamId64: String!
  rootAdmin: Boolean
  visibleRole: String
  kick: Boolean
  ban: Boolean
  tempKickBan: Boolean
  mute: Boolean
  makeTeams: Boolean
  reservedSlots: Boolean
  broadcastMessage: Boolean
  gameControl: Boolean
}

input RegisteredPlayerQuery {
  id: Int
  steamId64: String
}

input RegisteredPlayersQuery {
  page: Int
  pageSize: Int
  search: String
}

type Round {
  id: Int!
  game: Game!
  startedAt: DateTime!
  endedAt: DateTime
  scoreSpecialForces: Int!
  scoreTerrorists: Int!
}

input RoundInput {
  id: Int
  gameId: String
  startedAt: DateTime
  endedAt: DateTime
  scoreSpecialForces: Int
  scoreTerrorists: Int
}

input RoundQuery {
  page: Int
  pageSize: Int
  orderDesc: Boolean
  gameId: String
  startedAfter: DateTime
  startedBefore: DateTime
  onlyFinishedRounds: Boolean
}

type ServerMap {
  name: String!
}

input ServerMapInput {
  name: String!
}

type SteamUser {
  steamId64: String!
  name: String!
  avatarBigUrl: String!
  avatarMediumUrl: String!
}

enum Team {
  NONE
  SF
  TERR
}

type Weapon {
  name: String!
  weaponType: WeaponType!
}

input WeaponInput {
  name: String!
  weaponType: WeaponType!
}

enum WeaponType {
  NONE
  KNIFE
  PISTOL
  SMG
  RIFLE
  NADE
  BOMB
}
